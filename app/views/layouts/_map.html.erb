<script src="http://maps.googleapis.com/maps/api/js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC4s4AphOxVWIurhIcMF2TJHeopOVmefQ8&libraries=places&callback=initAutocomplete" async defer></script>

<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="googleMap" style=""></div>

<script>
  // This example adds a search box to a map, using the Google Place Autocomplete
  // feature. People can enter geographical searches. The search box will return a
  // pick list containing a mix of places and predicted search terms.

  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('googleMap'), {
      center: {lat: 28.9, lng: 5.62},
      zoom: 2,
      mapTypeId: 'roadmap'
    });

    // Set initial markers from saved list items.
    // http://stackoverflow.com/questions/15144691/google-maps-multiple-marker-from-extern-json
    $.getJSON(window.location.pathname, function(json1) { // Gets JSON which is @markers variable in lists controller.
        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // Added labels - https://developers.google.com/maps/documentation/javascript/examples/marker-labels
        var labelIndex = 0;
        $.each(json1, function(key, data) {
            var latLng = new google.maps.LatLng(data.lat, data.lng); 
            // Creating a marker and putting it on the map
            sum_latLng = data.lat + data.lng
            if (sum_latLng == 0) { // Check if long, lat is 0, 0. Then assumes that no adress was given for post by user and 
                                   //skips to create marker.
            } 
              else 
            {
                var marker = new google.maps.Marker({
                    position: latLng,
                    map: map,
                    title: data.title,
                    label: labels[labelIndex++ % labels.length],
                });

                var contentString = '<div id="content content2">'+ // Content for infowindows markers have.
                    '<div id="siteNotice">'+
                    '</div>'+
                    '<h1 id="firstHeading" class="firstHeading">'+data.title+'</h1>'+
                    '<div id="bodyContent">'+
                    '<p>'+data.desc+'</p>'+
                    '<p><a href="'+'/list_items/'+data.id+'">'+
                    'See post</p>'+
                    '</div>'+
                    '</div>';

                var infowindow = new google.maps.InfoWindow({ // Sets the content of infowindows.
                  content: contentString
                });

                marker.addListener('click', function() { // Sets click listener for each post.
                  infowindow.open(map, marker);
                });
          }

        });
    });



    // This block gets the adress when the user clicks.
    // http://stackoverflow.com/questions/36892826/click-on-google-maps-api-and-get-the-address
    var geocoder = new google.maps.Geocoder();


    var gmarkers = [];
    google.maps.event.addListener(map, 'click', function( event ){

        for(i=0; i<gmarkers.length; i++){ // Deletes markers
            gmarkers[i].setMap(null);
        }

      var myCenter = new google.maps.LatLng(event.latLng.lat(), event.latLng.lng());

        var marker = new google.maps.Marker({
          position: myCenter,
          title:'Click to zoom'
          });

        marker.setMap(map);
        gmarkers.push(marker);

        geocoder.geocode({
          'latLng': event.latLng
        }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
              var adress = results[0].formatted_address
            }
              document.getElementById("list_item_adress").value = event.latLng.lat() + ", " + event.latLng.lng() + ", " + "("+adress+")"; // Send coordinates to adress field.
              document.getElementById("adress_info").innerHTML = adress; // Send coordinates to adress field.
          }
        });
    });




    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }



// The code above creates a new map inside the <div> element with id="googleMap", using the parameters that are passed (mapProp).



</script>